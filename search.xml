<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL的账号匹配规则</title>
    <url>/2020/03/31/MySQL%E7%9A%84%E8%B4%A6%E5%8F%B7%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>MySQL的账号由 &#39;用户名&#39;@&#39;主机或IP&#39; 构成，当用户连接匹配到mysql权限表中不同账号时，将被赋予对应的权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select user,host from mysql.user;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------------+-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| user          | host      |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------------+-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">|               |           |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| test          |           |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|               | %         |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| test          | %         |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| mysql.session | localhost |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| mysql.sys     | localhost |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| root          | localhost |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|               | node1     |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| test          | node1     |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------------+-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>

<a id="more"></a>

<p>现在有这样一种场景：mysql.user表中的内容如上所示，假设：</p>
<ul>
<li><p>&#39;&#39;@&#39;&#39; 账号具有A库上的ALL权限</p>
</li>
<li><p>&#39;test&#39;@&#39;&#39; 账号具有B库上的ALL权限</p>
</li>
<li><p>&#39;&#39;@&#39;%&#39; 账号户具有C库上的ALL权限</p>
</li>
<li><p>&#39;test&#39;@&#39;%&#39; 账号具有D库上的ALL权限</p>
</li>
<li><p>&#39;&#39;@&#39;node1&#39; 账号具有E库上的ALL权限</p>
</li>
<li><p>&#39;test&#39;@&#39;node1&#39; 账号具有F库上的ALL权限</p>
</li>
</ul>
<p>此时如果使用’test’用户名从node1节点访问数据库，从账号匹配的角度来看，上述6个账号都能够被匹配到，但是只能选择其中一个，那么这个连接最终会匹配到哪个账号呢？</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>官方文档<a href="https://dev.mysql.com/doc/refman/5.7/en/connection-access.html" target="_blank" rel="noopener">Access Control, Stage 1: Connection Verification</a>中有如下说明：</p>
<blockquote>
<p>When multiple matches are possible, the server must determine which of them to use. It resolves this issue as follows:</p>
<p>Whenever the server reads the <code>user</code> table into memory, it sorts the rows.</p>
<p>When a client attempts to connect, the server looks through the rows in sorted order.</p>
<p>The server uses the first row that matches the client host name and user name.</p>
<p>The server uses sorting rules that order rows with the most-specific <code>Host</code> values first. Literal host names and IP addresses are the most specific.</p>
</blockquote>
<p>大致的意思是说，MySQL会首先对mysql.user表进行排序。当client试图连接数据库时，会扫描排序后的user表，一旦有账号被匹配到，便以此账号的身份给予权限，即选择第一个被匹配到的账号。排序规则为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>,host <span class="keyword">from</span> mysql.user <span class="keyword">order</span> <span class="keyword">by</span> host <span class="keyword">desc</span>,<span class="keyword">user</span> <span class="keyword">desc</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------------+-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| user          | host      |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------------+-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| test          | node1     |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|               | node1     |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| root          | localhost |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| mysql.sys     | localhost |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| mysql.session | localhost |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| test          | %         |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|               | %         |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| test          |           |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|               |           |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------------+-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>1，使用&#39;test&#39;用户名从node1节点连接数据库，看到current_user()函数输出为test@node1，即匹配到了&#39;test&#39;@&#39;node1&#39;账号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># mysql -utest -p123456 -h192.168.90.110</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; select user(),current_user();</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------+----------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| user()     | current_user() |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------+----------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| test@node1 | test@node1     |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------+----------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>

<p>2，删除test@node1账号后再次尝试连接，current_user()函数输出变为@node1，即匹配到&#39;&#39;@&#39;node1&#39;账号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># mysql -uroot </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; drop user test@node1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 0 rows affected (0.00 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; exit</span></pre></td></tr><tr><td class="code"><pre><span class="line">Bye</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># mysql -utest -p123456 -h192.168.90.110</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; select user(),current_user();</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------+----------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| user()     | current_user() |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------+----------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| test@node1 | @node1         |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------+----------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>

<p>3，删除&#39;&#39;@&#39;node1&#39;账号后再次尝试连接，current_user()函数输出变为test@%，即匹配到&#39;test&#39;@&#39;%&#39;账号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># mysql -uroot </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; drop user ''@'node1';</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 0 rows affected (0.00 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; exit</span></pre></td></tr><tr><td class="code"><pre><span class="line">Bye</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># mysql -utest -p123456 -h192.168.90.110</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; select user(),current_user();</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------+----------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| user()     | current_user() |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------+----------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| test@node1 | test@%         |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------+----------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>

<p>4，重复上述步骤，最终得到的current_user()函数输出顺序为：</p>
<ul>
<li><p>test@node1</p>
</li>
<li><p>@node1</p>
</li>
<li><p>test@%</p>
</li>
<li><p>@%</p>
</li>
<li><p>test@</p>
</li>
<li><p>@</p>
</li>
</ul>
<p>回过头来，再次看一下mysql.user表，排除host为localhost的3个账号，其顺序与上面的输出是完全一致的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>,host <span class="keyword">from</span> mysql.user <span class="keyword">order</span> <span class="keyword">by</span> host <span class="keyword">desc</span>,<span class="keyword">user</span> <span class="keyword">desc</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------------+-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| user          | host      |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------------+-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| test          | node1     |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|               | node1     |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| root          | localhost |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| mysql.sys     | localhost |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| mysql.session | localhost |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| test          | %         |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|               | %         |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| test          |           |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|               |           |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------------+-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>当一个客户端连接能够被mysql权限表中多个账号匹配到时，将按照“order by host desc,user desc”的顺序匹配排在最前面的那个账号，进而获得该账户对应的权限</li>
<li>当数据库中存在匿名账号时，例如&#39;&#39;@&#39;node1&#39;账号，它的匹配优先级是比较靠前的(比&#39;test&#39;@&#39;%&#39;账号高)，因此在使用匿名账号时要格外注意，避免用户连接被意外匹配到匿名账号上</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://dev.mysql.com/doc/refman/5.7/en/connection-access.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/connection-access.html</a></p>
]]></content>
      <categories>
        <category>MySQL原理</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>权限</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 8.0.18中的Hash Join</title>
    <url>/2019/12/21/MySQL%208.0.18%E4%B8%AD%E7%9A%84hash%20join/</url>
    <content><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>在之前的版本中，MySQL已经把Nested Loop玩出了诸多花样(除普通NL外，还有BNL和BKA)。随着MySQL 8.0中统计直方图的完善，hash join终于出现在了MySQL 8.0.18版本中，用于替代性能较差的BNL。</p>
<a id="more"></a>

<p>MySQL 8.0.18中hash join的使用<strong>前提条件</strong>包括如下3点：</p>
<ol>
<li>表与表之间是等值内连接并且优化器决定在连接字段上不使用索引，或者是不包含任何连接条件的笛卡尔连接；</li>
<li>在满足“条件1”的前提下，表与表之间可以包含不等值连接条件；</li>
<li>如果SQL中任意两个表之间的连接不满足“条件1”，则该SQL中的所有JOIN都不能使用hash join；</li>
</ol>
<p>为了在执行计划中看到”hash join”关键字，需要使用”EXPLAIN FORMAT=TREE”或”EXPLAIN ANALYZE”语句，否则看到的仍然是BNL(Block Nested Loop)，这点很容易产生误导。</p>
<p>hash join和BNL/BKA一样，都要使用到join buffer，其大小由join_buffer_size控制(默认256KB)，超过后会生成临时文件在磁盘上进行操作(文件操作又进一步涉及open_files_limit参数)。</p>
<p>为了支持hash join，MySQL的优化器选项中增加了如下配置：</p>
<ul>
<li>optimizer_switch中新增了hash join开关选项：hash_join，可以在global或session级别修改该参数；</li>
<li>新增2个hint：HASH_JOIN和NO_HASH_JOIN，用于在SQL级别控制hash join行为，但如果有合适的索引可用，HASH_JOIN这个hint仍然可能被忽略(从MySQL 8.0.19开始，这两个hint被置为无效)；</li>
</ul>
<p><strong>不适合使用hash join的场景</strong></p>
<ol>
<li>被驱动表的关联字段上存在筛选能力高的索引可用；</li>
<li>含有LIMIT子句，这时使用BNL能够提前结束表连接，而hash join在取LIMIT之前仍需要全部进行连接；</li>
</ol>
<hr>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>环境准备：</p>
<ul>
<li>数据库版本确认为8.0.18，join_buffer_size为默认的256KB大小，optimizer_switch中的hash_join=on</li>
<li>创建三张表t1、t2和t3，各包含10万行数据，t1_val和t2_val字段中都是0 ~ 99之间的数字，t3_val字段中是0 ~ 49之间的数字，这三个字段上均没有索引</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select version();</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| version() |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| 8.0.18    |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'join_buffer_size'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+--------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name    | Value  |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+--------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| join_buffer_size | 262144 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+--------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'optimizer_switch'</span>\G</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line">Variable_name: optimizer_switch</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">Value</span>: index_merge=<span class="keyword">on</span>,index_merge_union=<span class="keyword">on</span>,index_merge_sort_union=<span class="keyword">on</span>,index_merge_intersection=<span class="keyword">on</span>,engine_condition_pushdown=<span class="keyword">on</span>,index_condition_pushdown=<span class="keyword">on</span>,mrr=<span class="keyword">on</span>,mrr_cost_based=<span class="keyword">on</span>,block_nested_loop=<span class="keyword">on</span>,batched_key_access=<span class="keyword">off</span>,materialization=<span class="keyword">on</span>,semijoin=<span class="keyword">on</span>,loosescan=<span class="keyword">on</span>,firstmatch=<span class="keyword">on</span>,duplicateweedout=<span class="keyword">on</span>,subquery_materialization_cost_based=<span class="keyword">on</span>,use_index_extensions=<span class="keyword">on</span>,condition_fanout_filter=<span class="keyword">on</span>,derived_merge=<span class="keyword">on</span>,use_invisible_indexes=<span class="keyword">off</span>,skip_scan=<span class="keyword">on</span>,hash_join=<span class="keyword">on</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (t1_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment PRIMARY <span class="keyword">KEY</span>, t1_val <span class="built_in">int</span> <span class="keyword">unsigned</span>, t1_str <span class="built_in">varchar</span>(<span class="number">300</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 0 rows affected (0.23 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE t2 (t2_id int unsigned NOT NULL auto_increment PRIMARY KEY, t2_val int unsigned,t2_str varchar(300));</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 0 rows affected (0.11 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE t3 (t3_id int unsigned NOT NULL auto_increment PRIMARY KEY, t3_val int unsigned,t3_str varchar(300));</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 0 rows affected (1.76 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; SET SESSION cte_max_recursion_depth = 100000;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 0 rows affected (0.00 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO t1 (t1_val) WITH RECURSIVE digits(i) AS (SELECT 1 UNION ALL SELECT i+1 FROM digits WHERE i&lt;100000) SELECT FLOOR(RAND()*100) FROM digits;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 100000 rows affected (1.78 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Records: 100000  Duplicates: 0  Warnings: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO t2 (t2_val) WITH RECURSIVE digits(i) AS (SELECT 1 UNION ALL SELECT i+1 FROM digits WHERE i&lt;100000) SELECT FLOOR(RAND()*100) FROM digits;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 100000 rows affected (1.87 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Records: 100000  Duplicates: 0  Warnings: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO t3 (t3_val) WITH RECURSIVE digits(i) AS (SELECT 1 UNION ALL SELECT i+1 FROM digits WHERE i&lt;100000) SELECT FLOOR(RAND()*50) FROM digits;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 100000 rows affected (3.43 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Records: 100000  Duplicates: 0  Warnings: 0</span></pre></td></tr></table></figure>

<p>收集并查看统计信息直方图(非必要步骤)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; ANALYZE TABLE t1 UPDATE HISTOGRAM ON t1_val WITH 100 BUCKETS;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------+-----------+----------+---------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Table   | Op        | Msg_type | Msg_text                                          |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------+-----------+----------+---------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| test.t1 | histogram | status   | Histogram statistics created for column 't1_val'. |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------+-----------+----------+---------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 rows in <span class="keyword">set</span> (<span class="number">0.32</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">ANALYZE</span> <span class="keyword">TABLE</span> t2 <span class="keyword">UPDATE</span> HISTOGRAM <span class="keyword">ON</span> t2_val <span class="keyword">WITH</span> <span class="number">100</span> BUCKETS;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------+-----------+----------+---------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Table   | Op        | Msg_type | Msg_text                                          |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------+-----------+----------+---------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| test.t2 | histogram | status   | Histogram statistics created for column 't2_val'. |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------+-----------+----------+---------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 rows in <span class="keyword">set</span> (<span class="number">0.21</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">ANALYZE</span> <span class="keyword">TABLE</span> t3 <span class="keyword">UPDATE</span> HISTOGRAM <span class="keyword">ON</span> t3_val <span class="keyword">WITH</span> <span class="number">50</span> BUCKETS;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------+-----------+----------+---------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Table   | Op        | Msg_type | Msg_text                                          |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------+-----------+----------+---------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| test.t3 | histogram | status   | Histogram statistics created for column 't3_val'. |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------+-----------+----------+---------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">1.74</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> TABLE_NAME,COLUMN_NAME,HISTOGRAM <span class="keyword">FROM</span> INFORMATION_SCHEMA.COLUMN_STATISTICS <span class="keyword">WHERE</span> TABLE_NAME <span class="keyword">IN</span>(<span class="string">'t1'</span>,<span class="string">'t2'</span>,<span class="string">'t3'</span>)\G</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line">TABLE_NAME: t1</span></pre></td></tr><tr><td class="code"><pre><span class="line">COLUMN_NAME: t1_val</span></pre></td></tr><tr><td class="code"><pre><span class="line">  HISTOGRAM: &#123;<span class="string">"buckets"</span>: [[<span class="number">0</span>, <span class="number">0.00906727224855187</span>], [<span class="number">1</span>, <span class="number">0.019039626119010007</span>], [<span class="number">2</span>, <span class="number">0.028880331753554506</span>], [<span class="number">3</span>, <span class="number">0.03942864665613481</span>], [<span class="number">4</span>, <span class="number">0.04921998420221169</span>], [<span class="number">5</span>, <span class="number">0.05958728278041074</span>], [<span class="number">6</span>, <span class="number">0.06911532385466035</span>], [<span class="number">7</span>, <span class="number">0.07954844655081622</span>], [<span class="number">8</span>, <span class="number">0.08952080042127436</span>], [<span class="number">9</span>, <span class="number">0.09959189046866773</span>], [<span class="number">10</span>, <span class="number">0.10972880463401792</span>], [<span class="number">11</span>, <span class="number">0.11979989468141128</span>], [<span class="number">12</span>, <span class="number">0.1296899684044234</span>], [<span class="number">13</span>, <span class="number">0.13972814639283834</span>], [<span class="number">14</span>, <span class="number">0.14984860452869933</span>], [<span class="number">15</span>, <span class="number">0.1599855186940495</span>], [<span class="number">16</span>, <span class="number">0.17020471300684573</span>], [<span class="number">17</span>, <span class="number">0.1806542917324908</span>], [<span class="number">18</span>, <span class="number">0.19029752501316485</span>], [<span class="number">19</span>, <span class="number">0.2006319115323855</span>], [<span class="number">20</span>, <span class="number">0.21106503422854136</span>], [<span class="number">21</span>, <span class="number">0.22092219589257506</span>], [<span class="number">22</span>, <span class="number">0.23048314902580308</span>], [<span class="number">23</span>, <span class="number">0.24020866245392314</span>], [<span class="number">24</span>, <span class="number">0.2503455766192733</span>], [<span class="number">25</span>, <span class="number">0.2606470510795155</span>], [<span class="number">26</span>, <span class="number">0.27015863612427593</span>], [<span class="number">27</span>, <span class="number">0.2805423907319642</span>], [<span class="number">28</span>, <span class="number">0.29061348077935756</span>], [<span class="number">29</span>, <span class="number">0.301490916271722</span>], [<span class="number">30</span>, <span class="number">0.3111012374934176</span>], [<span class="number">31</span>, <span class="number">0.321254607688257</span>], [<span class="number">32</span>, <span class="number">0.33055226434965773</span>], [<span class="number">33</span>, <span class="number">0.34004739336492895</span>], [<span class="number">34</span>, <span class="number">0.3500526592943655</span>], [<span class="number">35</span>, <span class="number">0.36081490258030546</span>], [<span class="number">36</span>, <span class="number">0.3701948393891522</span>], [<span class="number">37</span>, <span class="number">0.3806937862032649</span>], [<span class="number">38</span>, <span class="number">0.39117627698788837</span>], [<span class="number">39</span>, <span class="number">0.4017739599789363</span>], [<span class="number">40</span>, <span class="number">0.4112690889942075</span>], [<span class="number">41</span>, <span class="number">0.42153765139547134</span>], [<span class="number">42</span>, <span class="number">0.43180621379673517</span>], [<span class="number">43</span>, <span class="number">0.44153172722485523</span>], [<span class="number">44</span>, <span class="number">0.4515863612427594</span>], [<span class="number">45</span>, <span class="number">0.4617232754081096</span>], [<span class="number">46</span>, <span class="number">0.4715475250131649</span>], [<span class="number">47</span>, <span class="number">0.48156924697209064</span>], [<span class="number">48</span>, <span class="number">0.4915416008425488</span>], [<span class="number">49</span>, <span class="number">0.501843075302791</span>], [<span class="number">50</span>, <span class="number">0.5123584781463929</span>], [<span class="number">51</span>, <span class="number">0.5219358873091101</span>], [<span class="number">52</span>, <span class="number">0.5324183780937336</span>], [<span class="number">53</span>, <span class="number">0.5423578199052134</span>], [<span class="number">54</span>, <span class="number">0.5519023170089522</span>], [<span class="number">55</span>, <span class="number">0.5616607424960507</span>], [<span class="number">56</span>, <span class="number">0.5706621906266457</span>], [<span class="number">57</span>, <span class="number">0.5808155608214851</span>], [<span class="number">58</span>, <span class="number">0.5907220905739864</span>], [<span class="number">59</span>, <span class="number">0.6008754607688258</span>], [<span class="number">60</span>, <span class="number">0.6109794628751976</span>], [<span class="number">61</span>, <span class="number">0.6217910742496051</span>], [<span class="number">62</span>, <span class="number">0.631335571353344</span>], [<span class="number">63</span>, <span class="number">0.641225645076356</span>], [<span class="number">64</span>, <span class="number">0.651263823064771</span>], [<span class="number">65</span>, <span class="number">0.6606108478146394</span>], [<span class="number">66</span>, <span class="number">0.6706654818325436</span>], [<span class="number">67</span>, <span class="number">0.68025934702475</span>], [<span class="number">68</span>, <span class="number">0.6897544760400212</span>], [<span class="number">69</span>, <span class="number">0.6995293575566088</span>], [<span class="number">70</span>, <span class="number">0.7096169036334914</span>], [<span class="number">71</span>, <span class="number">0.7195728014744603</span>], [<span class="number">72</span>, <span class="number">0.7284261453396526</span>], [<span class="number">73</span>, <span class="number">0.7379870984728806</span>], [<span class="number">74</span>, <span class="number">0.7483543970510796</span>], [<span class="number">75</span>, <span class="number">0.7585900473933651</span>], [<span class="number">76</span>, <span class="number">0.7683649289099528</span>], [<span class="number">77</span>, <span class="number">0.778501843075303</span>], [<span class="number">78</span>, <span class="number">0.7888197735650344</span>], [<span class="number">79</span>, <span class="number">0.7988579515534494</span>], [<span class="number">80</span>, <span class="number">0.8090606898367564</span>], [<span class="number">81</span>, <span class="number">0.8188191153238549</span>], [<span class="number">82</span>, <span class="number">0.8286762769878886</span>], [<span class="number">83</span>, <span class="number">0.8388461032122172</span>], [<span class="number">84</span>, <span class="number">0.8491475776724594</span>], [<span class="number">85</span>, <span class="number">0.8594984202211693</span>], [<span class="number">86</span>, <span class="number">0.870326487625066</span>], [<span class="number">87</span>, <span class="number">0.8800520010531862</span>], [<span class="number">88</span>, <span class="number">0.8895635860979465</span>], [<span class="number">89</span>, <span class="number">0.8993549236440234</span>], [<span class="number">90</span>, <span class="number">0.9087348604528701</span>], [<span class="number">91</span>, <span class="number">0.9184932859399686</span>], [<span class="number">92</span>, <span class="number">0.9281365192206427</span>], [<span class="number">93</span>, <span class="number">0.9390139547130071</span>], [<span class="number">94</span>, <span class="number">0.9495951816745658</span>], [<span class="number">95</span>, <span class="number">0.9594687993680887</span>], [<span class="number">96</span>, <span class="number">0.969934834123223</span>], [<span class="number">97</span>, <span class="number">0.9799071879936812</span>], [<span class="number">98</span>, <span class="number">0.9900605581885206</span>], [<span class="number">99</span>, <span class="number">1.0000000000000002</span>]], <span class="string">"data-type"</span>: <span class="string">"int"</span>, <span class="string">"null-values"</span>: <span class="number">0.0</span>, <span class="string">"collation-id"</span>: <span class="number">8</span>, <span class="string">"last-updated"</span>: <span class="string">"2019-12-20 07:10:36.951184"</span>, <span class="string">"sampling-rate"</span>: <span class="number">0.6069398964414872</span>, <span class="string">"histogram-type"</span>: <span class="string">"singleton"</span>, <span class="string">"number-of-buckets-specified"</span>: <span class="number">100</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** <span class="number">2.</span> <span class="keyword">row</span> ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line">TABLE_NAME: t2</span></pre></td></tr><tr><td class="code"><pre><span class="line">COLUMN_NAME: t2_val</span></pre></td></tr><tr><td class="code"><pre><span class="line">  HISTOGRAM: &#123;<span class="string">"buckets"</span>: [[<span class="number">0</span>, <span class="number">0.010344656910461797</span>], [<span class="number">1</span>, <span class="number">0.020293346092293475</span>], [<span class="number">2</span>, <span class="number">0.03050601375987857</span>], [<span class="number">3</span>, <span class="number">0.040520697563148605</span>], [<span class="number">4</span>, <span class="number">0.050584877332497405</span>], [<span class="number">5</span>, <span class="number">0.06086353962152085</span>], [<span class="number">6</span>, <span class="number">0.07094421804622923</span>], [<span class="number">7</span>, <span class="number">0.0807774166405438</span>], [<span class="number">8</span>, <span class="number">0.09095708699740972</span>], [<span class="number">9</span>, <span class="number">0.10044381382917293</span>], [<span class="number">10</span>, <span class="number">0.11115144115754567</span>], [<span class="number">11</span>, <span class="number">0.12060517067858971</span>], [<span class="number">12</span>, <span class="number">0.13043836927290428</span>], [<span class="number">13</span>, <span class="number">0.14055204500833185</span>], [<span class="number">14</span>, <span class="number">0.15101219250631076</span>], [<span class="number">15</span>, <span class="number">0.16181881176684104</span>], [<span class="number">16</span>, <span class="number">0.17137153322004262</span>], [<span class="number">17</span>, <span class="number">0.18148520895547018</span>], [<span class="number">18</span>, <span class="number">0.19158238603553815</span>], [<span class="number">19</span>, <span class="number">0.20095362227978425</span>], [<span class="number">20</span>, <span class="number">0.21090231146161592</span>], [<span class="number">21</span>, <span class="number">0.22083450198808802</span>], [<span class="number">22</span>, <span class="number">0.2309151804127964</span>], [<span class="number">23</span>, <span class="number">0.24089686690534726</span>], [<span class="number">24</span>, <span class="number">0.2507465641550214</span>], [<span class="number">25</span>, <span class="number">0.26132220224051744</span>], [<span class="number">26</span>, <span class="number">0.2711718994901916</span>], [<span class="number">27</span>, <span class="number">0.28136806850241713</span>], [<span class="number">28</span>, <span class="number">0.29095378726633786</span>], [<span class="number">29</span>, <span class="number">0.3012159509000017</span>], [<span class="number">30</span>, <span class="number">0.31078517100856284</span>], [<span class="number">31</span>, <span class="number">0.3203378924617644</span>], [<span class="number">32</span>, <span class="number">0.33020408836679815</span>], [<span class="number">33</span>, <span class="number">0.3400207883057531</span>], [<span class="number">34</span>, <span class="number">0.3501509626965403</span>], [<span class="number">35</span>, <span class="number">0.3595057002854268</span>], [<span class="number">36</span>, <span class="number">0.36963587467621395</span>], [<span class="number">37</span>, <span class="number">0.3792380920954943</span>], [<span class="number">38</span>, <span class="number">0.38908778934516847</span>], [<span class="number">39</span>, <span class="number">0.3987560013858871</span>], [<span class="number">40</span>, <span class="number">0.4088366798105955</span>], [<span class="number">41</span>, <span class="number">0.41792743891372863</span>], [<span class="number">42</span>, <span class="number">0.4283545891009884</span>], [<span class="number">43</span>, <span class="number">0.4382537823167413</span>], [<span class="number">44</span>, <span class="number">0.4483179620860901</span>], [<span class="number">45</span>, <span class="number">0.4588276055501478</span>], [<span class="number">46</span>, <span class="number">0.4684463216247877</span>], [<span class="number">47</span>, <span class="number">0.4783785121512598</span>], [<span class="number">48</span>, <span class="number">0.48827770536701276</span>], [<span class="number">49</span>, <span class="number">0.4977974295094951</span>], [<span class="number">50</span>, <span class="number">0.5083070729735528</span>], [<span class="number">51</span>, <span class="number">0.5186517298840146</span>], [<span class="number">52</span>, <span class="number">0.5285014271336888</span>], [<span class="number">53</span>, <span class="number">0.5386810974905547</span>], [<span class="number">54</span>, <span class="number">0.54928973288677</span>], [<span class="number">55</span>, <span class="number">0.5592714193793208</span>], [<span class="number">56</span>, <span class="number">0.5693026018379505</span>], [<span class="number">57</span>, <span class="number">0.579894738578806</span>], [<span class="number">58</span>, <span class="number">0.5904538780089424</span>], [<span class="number">59</span>, <span class="number">0.6006995429872467</span>], [<span class="number">60</span>, <span class="number">0.6104337496494038</span>], [<span class="number">61</span>, <span class="number">0.6205309267294717</span>], [<span class="number">62</span>, <span class="number">0.629935160284437</span>], [<span class="number">63</span>, <span class="number">0.6396198709805152</span>], [<span class="number">64</span>, <span class="number">0.6496510534391449</span>], [<span class="number">65</span>, <span class="number">0.6592697695137848</span>], [<span class="number">66</span>, <span class="number">0.6691359654188186</span>], [<span class="number">67</span>, <span class="number">0.6794311263632016</span>], [<span class="number">68</span>, <span class="number">0.6892478263021565</span>], [<span class="number">69</span>, <span class="number">0.6996089818679779</span>], [<span class="number">70</span>, <span class="number">0.7095576710498096</span>], [<span class="number">71</span>, <span class="number">0.7197538400620351</span>], [<span class="number">72</span>, <span class="number">0.7299335104189011</span>], [<span class="number">73</span>, <span class="number">0.7395687251489006</span>], [<span class="number">74</span>, <span class="number">0.7493854250878556</span>], [<span class="number">75</span>, <span class="number">0.7593671115804064</span>], [<span class="number">76</span>, <span class="number">0.7696622725247894</span>], [<span class="number">77</span>, <span class="number">0.7790335087690354</span>], [<span class="number">78</span>, <span class="number">0.7890811898830247</span>], [<span class="number">79</span>, <span class="number">0.7992278629291714</span>], [<span class="number">80</span>, <span class="number">0.809457029252116</span>], [<span class="number">81</span>, <span class="number">0.8196202009536224</span>], [<span class="number">82</span>, <span class="number">0.8290904291300261</span>], [<span class="number">83</span>, <span class="number">0.838907129068981</span>], [<span class="number">84</span>, <span class="number">0.8489053142168914</span>], [<span class="number">85</span>, <span class="number">0.860058405239973</span>], [<span class="number">86</span>, <span class="number">0.8702710729075581</span>], [<span class="number">87</span>, <span class="number">0.8803517513322665</span>], [<span class="number">88</span>, <span class="number">0.8914388477339098</span>], [<span class="number">89</span>, <span class="number">0.9011730543960669</span>], [<span class="number">90</span>, <span class="number">0.910544290640313</span>], [<span class="number">91</span>, <span class="number">0.92027849730247</span>], [<span class="number">92</span>, <span class="number">0.9298807147217504</span>], [<span class="number">93</span>, <span class="number">0.9403738595304485</span>], [<span class="number">94</span>, <span class="number">0.9505205325765952</span>], [<span class="number">95</span>, <span class="number">0.9599742620976393</span>], [<span class="number">96</span>, <span class="number">0.9698239593473134</span>], [<span class="number">97</span>, <span class="number">0.9796571579416279</span>], [<span class="number">98</span>, <span class="number">0.9898038309877746</span>], [<span class="number">99</span>, <span class="number">1.0</span>]], <span class="string">"data-type"</span>: <span class="string">"int"</span>, <span class="string">"null-values"</span>: <span class="number">0.0</span>, <span class="string">"collation-id"</span>: <span class="number">8</span>, <span class="string">"last-updated"</span>: <span class="string">"2019-12-20 07:11:40.258403"</span>, <span class="string">"sampling-rate"</span>: <span class="number">0.6069398964414872</span>, <span class="string">"histogram-type"</span>: <span class="string">"singleton"</span>, <span class="string">"number-of-buckets-specified"</span>: <span class="number">100</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** <span class="number">3.</span> <span class="keyword">row</span> ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line">TABLE_NAME: t3</span></pre></td></tr><tr><td class="code"><pre><span class="line">COLUMN_NAME: t3_val</span></pre></td></tr><tr><td class="code"><pre><span class="line">  HISTOGRAM: &#123;<span class="string">"buckets"</span>: [[<span class="number">0</span>, <span class="number">0.02045</span>], [<span class="number">1</span>, <span class="number">0.041569999999999996</span>], [<span class="number">2</span>, <span class="number">0.06140999999999999</span>], [<span class="number">3</span>, <span class="number">0.08099999999999999</span>], [<span class="number">4</span>, <span class="number">0.10089</span>], [<span class="number">5</span>, <span class="number">0.12076999999999999</span>], [<span class="number">6</span>, <span class="number">0.14067</span>], [<span class="number">7</span>, <span class="number">0.16113</span>], [<span class="number">8</span>, <span class="number">0.18152</span>], [<span class="number">9</span>, <span class="number">0.20198999999999998</span>], [<span class="number">10</span>, <span class="number">0.22208999999999998</span>], [<span class="number">11</span>, <span class="number">0.24156</span>], [<span class="number">12</span>, <span class="number">0.26165</span>], [<span class="number">13</span>, <span class="number">0.28160999999999997</span>], [<span class="number">14</span>, <span class="number">0.30163999999999996</span>], [<span class="number">15</span>, <span class="number">0.32105999999999996</span>], [<span class="number">16</span>, <span class="number">0.34131999999999996</span>], [<span class="number">17</span>, <span class="number">0.36146999999999996</span>], [<span class="number">18</span>, <span class="number">0.38072999999999996</span>], [<span class="number">19</span>, <span class="number">0.40054999999999996</span>], [<span class="number">20</span>, <span class="number">0.42157999999999995</span>], [<span class="number">21</span>, <span class="number">0.44176999999999994</span>], [<span class="number">22</span>, <span class="number">0.46115999999999996</span>], [<span class="number">23</span>, <span class="number">0.48172</span>], [<span class="number">24</span>, <span class="number">0.50109</span>], [<span class="number">25</span>, <span class="number">0.52171</span>], [<span class="number">26</span>, <span class="number">0.54217</span>], [<span class="number">27</span>, <span class="number">0.5621</span>], [<span class="number">28</span>, <span class="number">0.58143</span>], [<span class="number">29</span>, <span class="number">0.60137</span>], [<span class="number">30</span>, <span class="number">0.6214099999999999</span>], [<span class="number">31</span>, <span class="number">0.6411899999999999</span>], [<span class="number">32</span>, <span class="number">0.6616299999999999</span>], [<span class="number">33</span>, <span class="number">0.6814199999999999</span>], [<span class="number">34</span>, <span class="number">0.7012299999999999</span>], [<span class="number">35</span>, <span class="number">0.7212699999999999</span>], [<span class="number">36</span>, <span class="number">0.7411899999999999</span>], [<span class="number">37</span>, <span class="number">0.76089</span>], [<span class="number">38</span>, <span class="number">0.7811199999999999</span>], [<span class="number">39</span>, <span class="number">0.8009499999999999</span>], [<span class="number">40</span>, <span class="number">0.8204999999999999</span>], [<span class="number">41</span>, <span class="number">0.8404599999999999</span>], [<span class="number">42</span>, <span class="number">0.8609899999999999</span>], [<span class="number">43</span>, <span class="number">0.8805099999999999</span>], [<span class="number">44</span>, <span class="number">0.9009199999999999</span>], [<span class="number">45</span>, <span class="number">0.9204399999999999</span>], [<span class="number">46</span>, <span class="number">0.94136</span>], [<span class="number">47</span>, <span class="number">0.96039</span>], [<span class="number">48</span>, <span class="number">0.9805499999999999</span>], [<span class="number">49</span>, <span class="number">0.9999999999999999</span>]], <span class="string">"data-type"</span>: <span class="string">"int"</span>, <span class="string">"null-values"</span>: <span class="number">0.0</span>, <span class="string">"collation-id"</span>: <span class="number">8</span>, <span class="string">"last-updated"</span>: <span class="string">"2019-12-20 07:41:17.446201"</span>, <span class="string">"sampling-rate"</span>: <span class="number">1.0</span>, <span class="string">"histogram-type"</span>: <span class="string">"singleton"</span>, <span class="string">"number-of-buckets-specified"</span>: <span class="number">50</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>

<p>测试如何查看hash join：EXPLAIN FORMAT=TREE</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">##直接使用EXPLAIN仅能看到"Block Nested Loop"关键字</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; EXPLAIN</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; SELECT * FROM t1,t2,t3</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; WHERE t2.t2_val = t1.t1_val and t1.t1_val=t3.t3_val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+----------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra                                              |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+----------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">|  1 | SIMPLE      | t1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 100464 |   100.00 | NULL                                               |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|  1 | SIMPLE      | t2    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 100464 |    10.00 | Using where; Using join buffer (Block Nested Loop) |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|  1 | SIMPLE      | t3    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 100464 |    10.00 | Using where; Using join buffer (Block Nested Loop) |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+----------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">3 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">##只有使用"EXPLAIN FORMAT=TREE"才能看到"Inner hash join"关键字，下面输出可以看出3张表按照t1-&gt;t2-&gt;t3的顺序进行关联，两两之间均为hash join</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span> <span class="keyword">FORMAT</span>=TREE</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1,t2,t3</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">WHERE</span> t2.t2_val = t1.t1_val <span class="keyword">and</span> t1.t1_val=t3.t3_val\G</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span>: -&gt; <span class="keyword">Inner</span> <span class="keyword">hash</span> <span class="keyword">join</span> (t3.t3_val = t1.t1_val)  (<span class="keyword">cost</span>=<span class="number">10141380914795.79</span> <span class="keyword">rows</span>=<span class="number">10139847189164</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">Table</span> <span class="keyword">scan</span> <span class="keyword">on</span> t3  (<span class="keyword">cost</span>=<span class="number">0.52</span> <span class="keyword">rows</span>=<span class="number">100464</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">Hash</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        -&gt; <span class="keyword">Inner</span> <span class="keyword">hash</span> <span class="keyword">join</span> (t2.t2_val = t1.t1_val)  (<span class="keyword">cost</span>=<span class="number">1009337794.31</span> <span class="keyword">rows</span>=<span class="number">1009301545</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            -&gt; <span class="keyword">Table</span> <span class="keyword">scan</span> <span class="keyword">on</span> t2  (<span class="keyword">cost</span>=<span class="number">0.27</span> <span class="keyword">rows</span>=<span class="number">100464</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            -&gt; <span class="keyword">Hash</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                -&gt; <span class="keyword">Table</span> <span class="keyword">scan</span> <span class="keyword">on</span> t1  (<span class="keyword">cost</span>=<span class="number">10102.65</span> <span class="keyword">rows</span>=<span class="number">100464</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>

<p>测试hint与索引的效果：索引的优先级高于hint</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">##尝试让t1和t2之间进行hash join，t2和t3之间不使用hash join，但是EXPLAIN FORMAT=TREE未看到输出结果，使用EXPLAIN看到的是BNL连接方式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; EXPLAIN FORMAT=TREE</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; SELECT /*+HASH_JOIN(t1,t2) NO_HASH_JOIN(t2,t3)*/ * FROM t1,t2,t3</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; WHERE t2.t2_val = t1.t1_val and t1.t1_val=t3.t3_val\G</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span>: &lt;<span class="keyword">not</span> executable <span class="keyword">by</span> iterator executor&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">SELECT</span> <span class="comment">/*+HASH_JOIN(t1,t2) NO_HASH_JOIN(t2,t3)*/</span> * <span class="keyword">FROM</span> t1,t2,t3</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">WHERE</span> t2.t2_val = t1.t1_val <span class="keyword">and</span> t1.t1_val=t3.t3_val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+----------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra                                              |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+----------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">|  1 | SIMPLE      | t1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 100464 |   100.00 | NULL                                               |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|  1 | SIMPLE      | t2    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 100464 |    10.00 | Using where; Using join buffer (Block Nested Loop) |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|  1 | SIMPLE      | t3    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 100464 |    10.00 | Using where; Using join buffer (Block Nested Loop) |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+----------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">3 rows in <span class="keyword">set</span>, <span class="number">2</span> <span class="keyword">warnings</span> (<span class="number">0.00</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">##在t3表的t3_val字段上创建索引，尝试用HASH_JOIN(t1,t3)强制使用hash join，发现hint被忽略，t3作为被驱动表使用了idx_t3_val索引</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">create</span> <span class="keyword">index</span> idx_t3_val <span class="keyword">on</span> t3(t3_val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 0 rows affected (0.58 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; EXPLAIN FORMAT=TREE</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; SELECT /*+HASH_JOIN(t1,t3)*/ * FROM t1,t3</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; WHERE t1.t1_val=t3.t3_val\G</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span>: -&gt; <span class="keyword">Nested</span> <span class="keyword">loop</span> <span class="keyword">inner</span> <span class="keyword">join</span>  (<span class="keyword">cost</span>=<span class="number">37990517.85</span> <span class="keyword">rows</span>=<span class="number">210271152</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; Filter: (t1.t1_val <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>)  (<span class="keyword">cost</span>=<span class="number">10102.65</span> <span class="keyword">rows</span>=<span class="number">100464</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        -&gt; <span class="keyword">Table</span> <span class="keyword">scan</span> <span class="keyword">on</span> t1  (<span class="keyword">cost</span>=<span class="number">10102.65</span> <span class="keyword">rows</span>=<span class="number">100464</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">Index</span> lookup <span class="keyword">on</span> t3 <span class="keyword">using</span> idx_t3_val (t3_val=t1.t1_val)  (<span class="keyword">cost</span>=<span class="number">168.75</span> <span class="keyword">rows</span>=<span class="number">2093</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">##测试完清理索引</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">alter</span> <span class="keyword">table</span> t3 <span class="keyword">drop</span> <span class="keyword">index</span> idx_t3_val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 0 rows affected (0.16 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span></pre></td></tr></table></figure>

<p>测试笛卡尔连接：支持hash join</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; EXPLAIN FORMAT=TREE</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; SELECT * FROM t1,t2\G</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span>: -&gt; <span class="keyword">Inner</span> <span class="keyword">hash</span> <span class="keyword">join</span>  (<span class="keyword">cost</span>=<span class="number">1009337794.31</span> <span class="keyword">rows</span>=<span class="number">10093015296</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">Table</span> <span class="keyword">scan</span> <span class="keyword">on</span> t2  (<span class="keyword">cost</span>=<span class="number">0.36</span> <span class="keyword">rows</span>=<span class="number">100464</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">Hash</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        -&gt; <span class="keyword">Table</span> <span class="keyword">scan</span> <span class="keyword">on</span> t1  (<span class="keyword">cost</span>=<span class="number">10102.65</span> <span class="keyword">rows</span>=<span class="number">100464</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>

<p>测试外连接：不支持hash join，退化为BNL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; EXPLAIN FORMAT=TREE</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; SELECT * FROM t1 JOIN t2 ON t2.t2_val = t1.t1_val</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; LEFT JOIN t3 ON  t1.t1_val=t3.t3_val\G</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span>: &lt;<span class="keyword">not</span> executable <span class="keyword">by</span> iterator executor&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">JOIN</span> t2 <span class="keyword">ON</span> t2.t2_val = t1.t1_val</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t3 <span class="keyword">ON</span>  t1.t1_val=t3.t3_val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+----------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra                                              |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+----------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">|  1 | SIMPLE      | t1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 100464 |   100.00 | NULL                                               |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|  1 | SIMPLE      | t2    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 100464 |    10.00 | Using where; Using join buffer (Block Nested Loop) |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|  1 | SIMPLE      | t3    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 100464 |   100.00 | Using where; Using join buffer (Block Nested Loop) |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+----------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">3 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>

<p>测试不等值连接：不支持hash join，退化为BNL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">##SQL中只要有一个不等值连接，整个SQL中的所有连接都不会使用hash join</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; EXPLAIN FORMAT=TREE</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; SELECT * FROM t1 JOIN t2 ON t2.t2_val = t1.t1_val</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; JOIN t3 ON  t1.t1_val &gt; t3.t3_val\G</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span>: &lt;<span class="keyword">not</span> executable <span class="keyword">by</span> iterator executor&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">JOIN</span> t2 <span class="keyword">ON</span> t2.t2_val = t1.t1_val</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">JOIN</span> t3 <span class="keyword">ON</span>  t1.t1_val&gt;t3.t3_val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+----------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra                                              |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+----------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">|  1 | SIMPLE      | t1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 100464 |   100.00 | NULL                                               |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|  1 | SIMPLE      | t2    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 100464 |    10.00 | Using where; Using join buffer (Block Nested Loop) |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|  1 | SIMPLE      | t3    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 100464 |    33.33 | Using where; Using join buffer (Block Nested Loop) |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+----------------------------------------------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">3 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.01</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">##在满足全部为等值内连接的前提下，可以同时包含不等值连接条件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">EXPLAIN</span> <span class="keyword">FORMAT</span>=TREE</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">JOIN</span> t2 <span class="keyword">ON</span> t2.t2_val = t1.t1_val</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">JOIN</span> t3 <span class="keyword">ON</span> t1.t1_val = t3.t3_val <span class="keyword">and</span> t1.t1_id &gt; t3_id\G</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span>: -&gt; <span class="keyword">Inner</span> <span class="keyword">hash</span> <span class="keyword">join</span> (t2.t2_val = t1.t1_val)  (<span class="keyword">cost</span>=<span class="number">3380795229097.44</span> <span class="keyword">rows</span>=<span class="number">3379611112797</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">Table</span> <span class="keyword">scan</span> <span class="keyword">on</span> t2  (<span class="keyword">cost</span>=<span class="number">0.52</span> <span class="keyword">rows</span>=<span class="number">100464</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">Hash</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        -&gt; <span class="keyword">Nested</span> <span class="keyword">loop</span> <span class="keyword">inner</span> <span class="keyword">join</span>  (<span class="keyword">cost</span>=<span class="number">1009337794.31</span> <span class="keyword">rows</span>=<span class="number">336400209</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            -&gt; <span class="keyword">Table</span> <span class="keyword">scan</span> <span class="keyword">on</span> t1  (<span class="keyword">cost</span>=<span class="number">10102.65</span> <span class="keyword">rows</span>=<span class="number">100464</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            -&gt; Filter: ((t3.t3_val = t1.t1_val) <span class="keyword">and</span> (t1.t1_id &gt; t3.t3_id))  (<span class="keyword">cost</span>=<span class="number">0.26</span> <span class="keyword">rows</span>=<span class="number">3348</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                -&gt; <span class="keyword">Index</span> <span class="keyword">range</span> <span class="keyword">scan</span> <span class="keyword">on</span> t3 (re-planned <span class="keyword">for</span> <span class="keyword">each</span> iteration)  (<span class="keyword">cost</span>=<span class="number">0.26</span> <span class="keyword">rows</span>=<span class="number">100464</span>)</span></pre></td></tr></table></figure>

<p>测试非连接字段使用索引的情况：非连接字段可以使用索引，可以同时使用hash join</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; EXPLAIN FORMAT=TREE</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; SELECT * FROM t1 JOIN t2 ON t2.t2_val = t1.t1_val</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; JOIN t3 ON  t1.t1_val=t3.t3_val and t1.t1_id&gt;5000\G</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span>: -&gt; <span class="keyword">Inner</span> <span class="keyword">hash</span> <span class="keyword">join</span> (t3.t3_val = t1.t1_val)  (<span class="keyword">cost</span>=<span class="number">5070690462463.22</span> <span class="keyword">rows</span>=<span class="number">5069923594582</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">Table</span> <span class="keyword">scan</span> <span class="keyword">on</span> t3  (<span class="keyword">cost</span>=<span class="number">0.52</span> <span class="keyword">rows</span>=<span class="number">100464</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">Hash</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        -&gt; <span class="keyword">Inner</span> <span class="keyword">hash</span> <span class="keyword">join</span> (t2.t2_val = t1.t1_val)  (<span class="keyword">cost</span>=<span class="number">504673934.36</span> <span class="keyword">rows</span>=<span class="number">504650772</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            -&gt; <span class="keyword">Table</span> <span class="keyword">scan</span> <span class="keyword">on</span> t2  (<span class="keyword">cost</span>=<span class="number">0.28</span> <span class="keyword">rows</span>=<span class="number">100464</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            -&gt; <span class="keyword">Hash</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                -&gt; Filter: (t1.t1_id &gt; <span class="number">5000</span>)  (<span class="keyword">cost</span>=<span class="number">10060.40</span> <span class="keyword">rows</span>=<span class="number">50232</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    -&gt; <span class="keyword">Index</span> <span class="keyword">range</span> <span class="keyword">scan</span> <span class="keyword">on</span> t1 <span class="keyword">using</span> PRIMARY  (<span class="keyword">cost</span>=<span class="number">10060.40</span> <span class="keyword">rows</span>=<span class="number">50232</span>)</span></pre></td></tr></table></figure>

<p>测试join buffer大小对hash join性能的影响</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; EXPLAIN FORMAT=TREE</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; SELECT count(*) FROM t1,t2</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; WHERE t2.t2_val = t1.t1_val\G</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span>: -&gt; <span class="keyword">Aggregate</span>: <span class="keyword">count</span>(<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="keyword">Inner</span> <span class="keyword">hash</span> <span class="keyword">join</span> (t2.t2_val = t1.t1_val)  (<span class="keyword">cost</span>=<span class="number">1009311796.29</span> <span class="keyword">rows</span>=<span class="number">1009301545</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        -&gt; <span class="keyword">Table</span> <span class="keyword">scan</span> <span class="keyword">on</span> t2  (<span class="keyword">cost</span>=<span class="number">0.01</span> <span class="keyword">rows</span>=<span class="number">100464</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        -&gt; <span class="keyword">Hash</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            -&gt; <span class="keyword">Table</span> <span class="keyword">scan</span> <span class="keyword">on</span> t1  (<span class="keyword">cost</span>=<span class="number">10102.65</span> <span class="keyword">rows</span>=<span class="number">100464</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.11</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">##以如下形式，在会话级修改join_buffer_size为不同的值，测试SQL语句执行时长</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> join_buffer_size=<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">4</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">count</span>(*) <span class="keyword">FROM</span> t1,t2 <span class="keyword">WHERE</span> t2.t2_val = t1.t1_val;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">count</span>(*) <span class="keyword">FROM</span> t1,t2 <span class="keyword">WHERE</span> t2.t2_val = t1.t1_val;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">count</span>(*) <span class="keyword">FROM</span> t1,t2 <span class="keyword">WHERE</span> t2.t2_val = t1.t1_val;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">count</span>(*) <span class="keyword">FROM</span> t1,t2 <span class="keyword">WHERE</span> t2.t2_val = t1.t1_val;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">count</span>(*) <span class="keyword">FROM</span> t1,t2 <span class="keyword">WHERE</span> t2.t2_val = t1.t1_val;</span></pre></td></tr></table></figure>

<p>测试结果：join_buffer_size不是越大越好，这应该与malloc函数选择使用brk还是mmap系统调用分配内存的方式有关</p>
<table>
<thead>
<tr>
<th>join_buffer_size</th>
<th>执行时长</th>
</tr>
</thead>
<tbody><tr>
<td>32KB</td>
<td>4.04~4.37s</td>
</tr>
<tr>
<td>64KB</td>
<td>4.22~4.43s</td>
</tr>
<tr>
<td>128KB</td>
<td>4.24~4.50s</td>
</tr>
<tr>
<td>256KB</td>
<td>4.24~4.67s</td>
</tr>
<tr>
<td>512KB</td>
<td>4.19~4.59s</td>
</tr>
<tr>
<td>1MB</td>
<td>4.17~4.74s</td>
</tr>
<tr>
<td>2MB</td>
<td>4.77~5.28s</td>
</tr>
<tr>
<td>4MB</td>
<td>5.15~6.35s</td>
</tr>
<tr>
<td>8MB</td>
<td>7.39s~7.73s</td>
</tr>
<tr>
<td>16MB</td>
<td>11.15s~11.95s</td>
</tr>
</tbody></table>
<p>与BNL的性能比较</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">##使用hash join，从上面的测试结果可以看到，执行时间在4~5秒之间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">count</span>(*) <span class="keyword">FROM</span> t1,t2 <span class="keyword">WHERE</span> t2.t2_val = t1.t1_val;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">##使用BNL，执行10分钟未返回结果，最终放弃了</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="comment">/*+NO_HASH_JOIN(t1,t2)*/</span> <span class="keyword">count</span>(*) <span class="keyword">FROM</span> t1,t2 <span class="keyword">WHERE</span> t2.t2_val = t1.t1_val;</span></pre></td></tr></table></figure>

<p>Optimizer Trace视角：未发现特征信息，这里不贴trace了，太长了…</p>
<hr>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><em>How to Use Hash Joins? (文档 ID 2562434.1)</em></p>
<p><em><a href="https://dev.mysql.com/doc/refman/8.0/en/hash-joins.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/hash-joins.html</a></em></p>
]]></content>
      <categories>
        <category>SQL优化</category>
      </categories>
      <tags>
        <tag>SQL优化</tag>
        <tag>MySQL</tag>
        <tag>执行计划</tag>
      </tags>
  </entry>
  <entry>
    <title>open_files_limit参数真实值测试</title>
    <url>/2019/12/16/open_files_limit%E5%8F%82%E6%95%B0%E7%9C%9F%E5%AE%9E%E5%80%BC%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h5 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h5><p>open_files_limit参数限制了mysqld进程能够打开的操作系统文件描述符(fd)的最大数量，如果没有显式设置这个参数值，它的默认值取如下四种值中的<strong>最大值</strong>(版本&gt;=5.6.8)：</p>
<ol>
<li><strong>10 + max_connections + (table_open_cache * 2)</strong></li>
<li><strong>max_connections * 5</strong></li>
<li><strong>操作系统设置的open files的上限值(启动mysqld的操作系统用户的ulimit -n)</strong></li>
<li><strong>5000</strong></li>
</ol>
<a id="more"></a>

<p>如果显式设置了open_files_limit参数的值，则它的真实值为下面三种值中的<strong>最大值</strong>(版本&gt;=5.6.8)：</p>
<ol>
<li><strong>10 + max_connections + (table_open_cache * 2)</strong></li>
<li><strong>max_connections * 5</strong></li>
<li><strong>open_files_limit显式设置的值</strong></li>
</ol>
<p>事实上，mysqld内部是使用<a href="https://linux.die.net/man/2/setrlimit" target="_blank" rel="noopener">setrlimit</a>系统调用函数来设置自己的资源使用限制，如果它设置的值超过操作系统limit限制，则setrlimit会报错，上限即以OS的limit限制为准；如果它低于OS的limit限制，则以它设置的值为准。但是如果mysqld是使用root启动的，则不会发生此类情况</p>
<p>open_files_limit是全局静态参数，因此即使修改了动态参数table_open_cache或max_connections，open_files_limit的值也不会立即变化，只有重启mysqld以后才生效</p>
<p>注意使用ulimit -n <em>XXX</em>修改操作系统limit仅对当前会话生效，该命令可以写在/etc/profile中，使每个会话登录时自动执行，也可以在/etc/security/limits.conf文件中进行配置(nofile，最大1048576)</p>
<hr>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>初始环境：未显式设置open_files_limit参数值的大小</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># cat /etc/my.cnf | grep limit</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># ulimit -n</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1024</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; show variables like 'table_open_cache';</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name    | Value |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| table_open_cache | 2000  |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.72</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'max_connections'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-----------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name   | Value |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-----------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| max_connections | 151   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-----------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">--------------------------------------------------------------------------</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">10</span> + max_connections + (table_open_cache * <span class="number">2</span>) = <span class="number">10</span> + <span class="number">151</span> + <span class="number">2000</span> * <span class="number">2</span> = <span class="number">4161</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">max_connections * <span class="number">5</span> = <span class="number">151</span> * <span class="number">5</span> = <span class="number">755</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">操作系统上限<span class="number">1024</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">--------------------------------------------------------------------------</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">根据规律，open_files_limit值应当为<span class="number">5000</span>，验证结果</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'open_files_limit'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name    | Value |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| open_files_limit | 5000  |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>

<p>设置table_open_cache=3000并重启mysqld</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># cat /etc/my.cnf | grep cache</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">table_open_cache=3000</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># service mysqld restart</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Shutting down MySQL..                                      [  OK  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Starting MySQL.                                            [  OK  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">--------------------------------------------------------------------------</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">10 + max_connections + (table_open_cache * 2) = 10 + 151 + 3000 * 2 = 6161</span></pre></td></tr><tr><td class="code"><pre><span class="line">max_connections * 5 = 151 * 5 = 755</span></pre></td></tr><tr><td class="code"><pre><span class="line">操作系统上限1024</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">--------------------------------------------------------------------------</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; show variables like 'open_files_limit';</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name    | Value |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| open_files_limit | 6161  |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>

<p>设置max_connections=2000并重启mysqld(table_open_cache恢复成默认值2000)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># cat /etc/my.cnf | grep connections</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">max_connections=2000</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># service mysqld restart</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Shutting down MySQL..                                      [  OK  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Starting MySQL.                                            [  OK  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">--------------------------------------------------------------------------</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">10 + max_connections + (table_open_cache * 2) = 10 + 151 + 2000 * 2 = 4161</span></pre></td></tr><tr><td class="code"><pre><span class="line">max_connections * 5 = 2000 * 5 = 10000</span></pre></td></tr><tr><td class="code"><pre><span class="line">操作系统上限1024</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">--------------------------------------------------------------------------</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; show variables like 'open_files_limit';</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name    | Value |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| open_files_limit | 10000 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>

<p>设置操作系统ulimit -n 65536并重启mysqld(max_connections恢复成默认值151)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># ulimit -n</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1024</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># ulimit -n 65536</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># ulimit -n</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">65536</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># service mysqld restart</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Shutting down MySQL..                                      [  OK  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Starting MySQL.                                            [  OK  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">--------------------------------------------------------------------------</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">10 + max_connections + (table_open_cache * 2) = 10 + 151 + 2000 * 2 = 4161</span></pre></td></tr><tr><td class="code"><pre><span class="line">max_connections * 5 = 151 * 5 = 755</span></pre></td></tr><tr><td class="code"><pre><span class="line">操作系统上限65536</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">--------------------------------------------------------------------------</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; show variables like 'open_files_limit';</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name    | Value |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| open_files_limit | 65536 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span></pre></td></tr></table></figure>

<p>恢复操作系统ulimit -n 1024，同时恢复table_open_cache和max_connections为默认值，显式设置open_files_limit=10000</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># ulimit -n 1024</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># ulimit -n</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1024</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># cat /etc/my.cnf | grep limit</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">open_files_limit=10000</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># service mysqld restart</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Shutting down MySQL..                                      [  OK  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Starting MySQL.                                            [  OK  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">--------------------------------------------------------------------------</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">10 + max_connections + (table_open_cache * 2) = 10 + 151 + 2000 * 2 = 4161</span></pre></td></tr><tr><td class="code"><pre><span class="line">max_connections * 5 = 151 * 5 = 755</span></pre></td></tr><tr><td class="code"><pre><span class="line">操作系统上限1024</span></pre></td></tr><tr><td class="code"><pre><span class="line">open_files_limit=10000</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">--------------------------------------------------------------------------</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; show variables like 'open_files_limit';</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name    | Value |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| open_files_limit | 10000 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>

<p>显式设置open_files_limit=200，其它均保持默认值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># cat /etc/my.cnf | grep limit</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">open_files_limit=200</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># service mysqld restart</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Shutting down MySQL..                                      [  OK  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Starting MySQL.                                            [  OK  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">--------------------------------------------------------------------------</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">10 + max_connections + (table_open_cache * 2) = 10 + 151 + 2000 * 2 = 4161</span></pre></td></tr><tr><td class="code"><pre><span class="line">max_connections * 5 = 151 * 5 = 755</span></pre></td></tr><tr><td class="code"><pre><span class="line">操作系统上限1024</span></pre></td></tr><tr><td class="code"><pre><span class="line">open_files_limit=200</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">--------------------------------------------------------------------------</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; show variables like 'open_files_limit';</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name    | Value |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| open_files_limit | 4161  |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>

<p>显式设置open_files_limit=200，同时设置操作系统ulimit -n 65536并重启mysqld</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># ulimit -n 65536</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># ulimit -n</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">65536</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># cat /etc/my.cnf | grep limit</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">open_files_limit=200</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]<span class="comment"># service mysqld restart</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Shutting down MySQL..                                      [  OK  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Starting MySQL.                                            [  OK  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">--------------------------------------------------------------------------</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">10 + max_connections + (table_open_cache * 2) = 10 + 151 + 2000 * 2 = 4161</span></pre></td></tr><tr><td class="code"><pre><span class="line">max_connections * 5 = 151 * 5 = 755</span></pre></td></tr><tr><td class="code"><pre><span class="line">操作系统上限65536</span></pre></td></tr><tr><td class="code"><pre><span class="line">open_files_limit=200</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">--------------------------------------------------------------------------</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; show variables like 'open_files_limit';</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name    | Value |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| open_files_limit | 4161  |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>

<h5 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h5><p><em><a href="https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_open_files_limit" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_open_files_limit</a></em></p>
]]></content>
      <categories>
        <category>MySQL原理</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>参数</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL内存使用分析</title>
    <url>/2019/12/11/MySQL%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h4 id="mysqld的内存使用策略"><a href="#mysqld的内存使用策略" class="headerlink" title="mysqld的内存使用策略"></a><strong>mysqld的内存使用策略</strong></h4><p>mysqld启动前状态：OS总内存1985MB，已使用280MB，空闲941MB，Swap空间未使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]# ps -ef | grep mysqld</span></pre></td></tr><tr><td class="code"><pre><span class="line">root      69294  68350  0 09:35 pts/0    00:00:00 grep mysqld</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@bogon ~]# free -m</span></pre></td></tr><tr><td class="code"><pre><span class="line">              total        used        free      shared  buff/cache   available</span></pre></td></tr><tr><td class="code"><pre><span class="line">Mem:           1985         280         941           8         763        1543</span></pre></td></tr><tr><td class="code"><pre><span class="line">Swap:          2047           0        2047</span></pre></td></tr></table></figure>

<a id="more"></a>

<p>buffer_pool配置的大小是512MB</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]# cat /etc/my.cnf | grep innodb_buffer_pool_size</span></pre></td></tr><tr><td class="code"><pre><span class="line">innodb_buffer_pool_size=512m</span></pre></td></tr></table></figure>

<p>mysqld启动后：内存使用增加至478MB，增加了198MB，Swap无变化，buff/cache增长了12MB</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]# ps -ef | grep mysqld</span></pre></td></tr><tr><td class="code"><pre><span class="line">root      69315      1 21 09:36 pts/0    00:00:01 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/mysql_data --pid-file=/mysql_data/rhel6.pid</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql     69628  69315  8 09:36 pts/0    00:00:00 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/mysql_data --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=error.log --pid-file=/mysql_data/rhel6.pid --socket=/mysql_data/mysql.sock --port=3306</span></pre></td></tr><tr><td class="code"><pre><span class="line">root      69663  68350  0 09:37 pts/0    00:00:00 grep mysqld</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@bogon ~]# free -m</span></pre></td></tr><tr><td class="code"><pre><span class="line">              total        used        free      shared  buff/cache   available</span></pre></td></tr><tr><td class="code"><pre><span class="line">Mem:           1985         478         731           8         775        1345</span></pre></td></tr><tr><td class="code"><pre><span class="line">Swap:          2047           0        2047</span></pre></td></tr></table></figure>

<blockquote>
<p>备注：</p>
<p>total：内存总数</p>
<p>used：已经使用的内存数</p>
<p>free：空闲的内存数</p>
<p>shared：多个进程共享的内存总额</p>
<p>buffers：系统分配但未被使用的buffers大小</p>
<p>cached：Page 系统分配但未被使用的cache大小</p>
</blockquote>
<p>使用TOP命令观察mysqld进程的内存使用，看到常驻内存占用211MB，虚拟内存1506MB</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iB Mem :  2033528 total,   740804 free,   498444 used,   794280 buff/cache</span></pre></td></tr><tr><td class="code"><pre><span class="line">KiB Swap:  2097148 total,  2097148 free,        0 used.  1369180 avail Mem </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                                                                                               </span></pre></td></tr><tr><td class="code"><pre><span class="line"> 69628 mysql     20   0 1541944 216396   7116 S  0.0 10.6   0:00.56 mysqld</span></pre></td></tr></table></figure>

<blockquote>
<p>备注：</p>
<p>PR：优先级</p>
<p>NI：nice值，负值表示高优先级，正值表示低优先级</p>
<p>VIRT：虚拟内存大小</p>
<p>RES：常驻内存大小，是进程当前使用的内存大小，包含其他进程的共享内存，不包括swap out</p>
<p>SHR：共享内存大小</p>
</blockquote>
<p>查看启动后buffer pool的情况</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW variables LIKE 'innodb_buffer_pool_size';</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-------------------------+-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name           | Value     |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-------------------------+-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| innodb_buffer_pool_size | 536870912 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-------------------------+-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> <span class="keyword">STATUS</span> <span class="keyword">LIKE</span> <span class="string">'innodb_buffer_pool_pages_total'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">--------------------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name                  | Value |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">--------------------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Innodb_buffer_pool_pages_total | 32764 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">--------------------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> <span class="keyword">STATUS</span> <span class="keyword">LIKE</span> <span class="string">'innodb_buffer_pool_pages_free'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-------------------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name                 | Value |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-------------------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Innodb_buffer_pool_pages_free | 30142 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-------------------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span></pre></td></tr></table></figure>

<p>sys schema中提供了直接查看内存使用的VIEW，当然前提是要先开启performance_schema中的对应instrument和consumer，好在sys提供了存储过程帮我们一键开启：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> sys.ps_setup_enable_instrument(<span class="string">'wait'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> sys.ps_setup_enable_instrument(<span class="string">'stage'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> sys.ps_setup_enable_instrument(<span class="string">'statement'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> sys.ps_setup_enable_consumer(<span class="string">'current'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> sys.ps_setup_enable_consumer(<span class="string">'history_long'</span>);</span></pre></td></tr></table></figure>

<p>开启以后，查看memory_global_total即可</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from sys.memory_global_total;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-----------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| total_allocated |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-----------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| 132.01 MiB      |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-----------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span></pre></td></tr></table></figure>

<p>为了测试内存波动，现把官方的测试库load进去：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@bogon test_db-master]# mysql -uroot -p123456 &lt; employees.sql</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO</span></pre></td></tr><tr><td class="code"><pre><span class="line">CREATING DATABASE STRUCTURE</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO</span></pre></td></tr><tr><td class="code"><pre><span class="line">storage engine: InnoDB</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO</span></pre></td></tr><tr><td class="code"><pre><span class="line">LOADING departments</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO</span></pre></td></tr><tr><td class="code"><pre><span class="line">LOADING employees</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO</span></pre></td></tr><tr><td class="code"><pre><span class="line">LOADING dept_emp</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO</span></pre></td></tr><tr><td class="code"><pre><span class="line">LOADING dept_manager</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO</span></pre></td></tr><tr><td class="code"><pre><span class="line">LOADING titles</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO</span></pre></td></tr><tr><td class="code"><pre><span class="line">LOADING salaries</span></pre></td></tr><tr><td class="code"><pre><span class="line">data_load_time_diff</span></pre></td></tr><tr><td class="code"><pre><span class="line">00:01:08</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@bogon test_db-master]#</span></pre></td></tr></table></figure>

<p>再次查看OS层面的内存使用情况，发现常驻内存占用409MB(增加了198MB)，虚拟内存1544MB(增加了38MB)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">KiB Mem :  2033528 total,   286280 free,   699384 used,  1047864 buff/cache</span></pre></td></tr><tr><td class="code"><pre><span class="line">KiB Swap:  2097148 total,  2097148 free,        0 used.  1165152 avail Mem </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                                                                                               </span></pre></td></tr><tr><td class="code"><pre><span class="line"> 69628 mysql     20   0 1580688 418448   9284 S  0.0 20.6   1:05.71 mysqld</span></pre></td></tr></table></figure>

<p>再次查看buffer pool和内存的使用情况，看到free page减少至22818(减少了7324个page，对应114MB)，但sys.memory_global_total查到的仅增加了9MB左右内存(感觉这个VIEW的结果不太准确)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW GLOBAL STATUS LIKE 'innodb_buffer_pool_pages_free';</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-------------------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name                 | Value |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-------------------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Innodb_buffer_pool_pages_free | 22818 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-------------------------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> sys.memory_global_total;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-----------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| total_allocated |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-----------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| 141.07 MiB      |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-----------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>

<p>从上述现象可以看出：</p>
<ul>
<li><strong>mysqld启动以后，仅在虚拟内存中分配了所需要的地址空间，并没有真正的映射到物理内存上(否则mysqld的内存占用会立即大于innodb_buffer_pool_size设定的512MB)，而是在使用过程中再映射到物理内存，如果物理内存(内存+swap)不足了，就会出错甚至退出</strong></li>
</ul>
<blockquote>
<p> <em>Why is MySQL Using Less Memory Than Configured? (文档 ID 1483601.1)</em></p>
<p><em>On Linux the operating system is not necessarily physically allocating the memory when it is requested. This is done as generally processes request more memory than it actually will end up using. So by defering the actual allocation of memory, work is reduced and it is possible to allow more processes than would fit into memory if all processes used the full amount of memory requested. Other operating systems uses different strategies, each with its pros and cons.</em></p>
</blockquote>
<hr>
<h4 id="MySQL的内存分配相关参数"><a href="#MySQL的内存分配相关参数" class="headerlink" title="MySQL的内存分配相关参数"></a>MySQL的内存分配相关参数</h4><h5 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select version();</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| version()  |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| 5.7.25-log |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">where</span> variable_name <span class="keyword">in</span> (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'innodb_buffer_pool_size'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'innodb_log_buffer_size'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'innodb_additional_mem_pool_size'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'key_buffer_size'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'query_cache_size'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; );</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-------------------------+-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name           | Value     |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-------------------------+-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| innodb_buffer_pool_size | 134217728 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| innodb_log_buffer_size  | 16777216  |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| key_buffer_size         | 8388608   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| query_cache_size        | 1048576   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-------------------------+-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>

<ul>
<li><strong>innodb_buffer_pool_size</strong>：buffer pool的大小，默认值128MB，建议为总内存的80%(InnoDB还要为buffer pool预留一些空间供control structures使用，因此实际大小为设定值的110%左右)</li>
<li><strong>innodb_log_buffer_size</strong>：log buffer的大小，默认值8MB或16MB</li>
<li><strong>key_buffer_size</strong>：MyISAM表的索引缓冲区(key cache)大小，默认值8MB<blockquote>
<p>1，key cache用于缓存MyISAM表的索引块，而MyISAM表的数据块是直接存放于操作系统文件缓存中的</p>
<p>2，如果大量使用MyISAM引擎的表，可将此值增大至总内存的25%，但不建议太大</p>
<p>3，调大此参数可以增加MyISAM表BULK INSERT的效率</p>
<p>4，通过观察状态变量Key_read_requests, Key_reads, Key_write_requests和Key_writes来了解key_buffer_size的设置是否合理，其中Key_reads/Key_read_requests的值应当小于0.1，Key_writes/Key_write_requests的值应当在1左右</p>
<p>5，key cache的碎片率计算公式如下，Key_blocks_unused是未使用的块数，key_cache_block_size是每个块的大小。下面公式值越大，说明key cache利用率越高，碎片率越小：<br><strong>1 - ((Key_blocks_unused * key_cache_block_size) / key_buffer_size)</strong></p>
</blockquote>
</li>
<li><strong>innodb_additional_mem_pool_size</strong>：存放数据字典和其它内部结构的内存大小，默认值8MB，它与innodb_use_sys_malloc参数有关联(<em>两个参数在MySQL 5.7.4中被移除</em>)<blockquote>
<p><strong>该参数被移除的原因</strong>：早期操作系统的内存分配器性能和可伸缩性较差，并且当时没有适合多核心CPU的内存分配器。所以InnoDB实现了一套自己的内存分配系统，做为内存系统的参数之一，引入了innodb_additional_mem_pool_size。随着多核心CPU的广泛应用和操作系统的成熟，操作系统能够提供性能更高、可伸缩性更好的内存分配器，包括Hoard、libumem、mtmalloc、ptmalloc、tbbmalloc和TCMalloc等。InnoDB实现的内存分配器相比操作系统的内存分配器并没有明显优势，所以在MySQL 5.7.4及之后的版本中，移除了innodb_additional_mem_pool_size 和 innodb_use_sys_malloc两个参数，统一使用操作系统的内存分配器</p>
</blockquote>
</li>
<li><strong>query_cache_size</strong>：查询缓存的大小，默认值1MB(<em>MySQL 8.0.3中被移除</em>)<blockquote>
<p><strong>该参数被移除的原因</strong>：整个查询缓存功能被移除</p>
</blockquote>
</li>
</ul>
<h5 id="线程私有内存"><a href="#线程私有内存" class="headerlink" title="线程私有内存"></a>线程私有内存</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select version();</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| version()  |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| 5.7.25-log |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">where</span> variable_name <span class="keyword">in</span> (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'read_buffer_size'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'read_rnd_buffer_size'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'sort_buffer_size'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'join_buffer_size'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'binlog_cache_size'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'binlog_stmt_cache_size'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'bulk_insert_buffer_size'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'thread_stack'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'net_buffer_length'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'myisam_sort_buffer_size'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'preload_buffer_size'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; );</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-------------------------+----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name           | Value    |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-------------------------+----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| binlog_cache_size       | 32768    |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| binlog_stmt_cache_size  | 32768    |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| bulk_insert_buffer_size | 8388608  |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| join_buffer_size        | 262144   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| myisam_sort_buffer_size | 8388608  |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| net_buffer_length       | 16384    |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| preload_buffer_size     | 32768    |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| read_buffer_size        | 131072   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| read_rnd_buffer_size    | 262144   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| sort_buffer_size        | 262144   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| thread_stack            | 262144   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-------------------------+----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">11 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">where</span> variable_name <span class="keyword">in</span> (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'max_heap_table_size'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'tmp_table_size'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; );</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------------------+----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name       | Value    |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------------------+----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| max_heap_table_size | 16777216 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| tmp_table_size      | 16777216 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">---------------------+----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr></table></figure>
<ul>
<li><strong>read_buffer_size</strong>：默认128KB，必须是4KB的倍数，具有如下功能：<blockquote>
<p>1，对MyISAM引擎的表进行顺序读(sequential scan)的缓存区大小</p>
<p>2，MEMORY引擎表的MEMORY BLOCK SIZE大小</p>
<p>3，各种引擎的表在执行ORDER BY排序操作时，用于缓存索引数据的临时文件的大小</p>
<p>4，各种引擎的分区表在执行BULK INSERT时所使用的缓存区大小</p>
<p>5，用于缓存各种引擎的表的子查询结果集的缓存区大小</p>
</blockquote>
</li>
<li><strong>read_rnd_buffer_size</strong>：默认256KB，具有如下功能：<blockquote>
<p>1，MRR所使用的排序buffer大小</p>
<p>2，对MyISAM引擎的表进行随机读的缓冲区大小。例如按照某字段的ORDER BY顺序对MyISAM表进行rowid排序时(参与排序的所有字段(包括select与order by字段)长度超过max_length_for_sort_data)，会先在Sort Buffer中按照需求进行排序，然后将rowid放入read_rnd_buffer_size管理的缓冲区中按照rowid再排序，最后再用有序的rowid回表，从而将随机读转化为顺序读(类似于MRR)</p>
</blockquote>
</li>
<li><strong>sort_buffer_size</strong>：SQL语句用来进行内存排序操作(order by,group by)的buffer大小，默认256KB，过小会导致磁盘排序。如果增大了max_sort_length参数值(限定字段的前N个字节参与排序,尤其是针对BLOB和TEXT类型)，则sort_buffer_size值也应当增大</li>
<li><strong>binlog_cache_size</strong>：存放每个线程自己transaction的binlog的缓存大小，默认32KB，如果有大事务可以调大</li>
<li><strong>binlog_stmt_cache_size</strong>：存放每个线程自己的transaction中非事务语句的binlog event的缓存大小，默认32KB</li>
<li><strong>join_buffer_size</strong>：join buffer的大小，在BNL和BKA中，用于缓存驱动表的数据，默认256KB</li>
<li><strong>bulk_insert_buffer_size</strong>：用于提高MyISAM表的bulk insert操作(INSERT…SELECT，INSERT VALUES(),…,()，LOAD DATA)效率的cache tree大小，默认8MB</li>
<li><strong>tmp_table_size</strong>：内存临时表的大小上限(其实是由<strong>MIN(max_heap_table_size,tmp_table_size)</strong>决定的)，默认为16MB，超过会转变为磁盘临时表</li>
<li><strong>max_heap_table_size</strong>：内存表的大小上限，默认16MB</li>
<li><strong>preload_buffer_size</strong>：预加载索引时分配的缓冲区大小，默认32KB</li>
<li><strong>myisam_sort_buffer_size</strong>：MyISAM表执行REPAIR TABLE和CREATE/ALTER INDEX时所使用的排序操作的buffer大小，默认8MB</li>
<li><strong>thread_stack</strong>：每个连接线程被创建时，MySQL给它分配的内存堆栈大小，默认256KB</li>
<li><strong>net_buffer_length</strong>：connection buffer和result buffer的初始大小，默认16KB，这两个缓冲区最大能够增长至max_allowed_packet参数指定的大小(4MB)，SQL执行完后收缩至net_buffer_length参数指定的大小</li>
</ul>
<p>根据上面的描述，可以使用如下公式大致评估mysql进程可能使用的最大内存量(通常达不到这个值，因为极少可能出现大量线程同时使用内存临时表和bulk insert buffer等)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## MOS文档(ID 1483601.1)中给出了如下公式：</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Global Usage &#x3D; key_buffer_size + query_cache_size + 1.1 * innodb_buffer_pool_size + innodb_additional_mem_pool_size + innodb_log_buffer_size</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Per Thread &#x3D; thread_stack + 2 * net_buffer_length</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Note: the per query contribution is more or less based on an average query</span></pre></td></tr><tr><td class="code"><pre><span class="line">Per Query &#x3D; &quot;buffer for reading rows&quot; + &quot;sorting&quot; + &quot;full joins&quot; + &quot;binlog cache&quot; + &quot;index preload&quot; + &quot;internal tmp tables&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#x3D;  max(read_buffer_size, read_rnd_buffer_size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">          +  max(sort_buffer_size&#x2F;2, &quot;avg queries with scan&quot; * &quot;avg scans with merge&quot; * sort_buffer_size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">          + &quot;avg full joins&quot; * join_buffer_size</span></pre></td></tr><tr><td class="code"><pre><span class="line">          + &quot;avg binlog cache use&quot; * binlog_cache_size</span></pre></td></tr><tr><td class="code"><pre><span class="line">          +  preload_buffer_size</span></pre></td></tr><tr><td class="code"><pre><span class="line">          + &quot;avg tmp tables&quot; * min(tmp_table_size, max_heap_table_size)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Total &#x3D; &quot;global&quot; + max_used_connections * (&quot;thread&quot; + &quot;query&quot;)</span></pre></td></tr></table></figure>
<hr>
<h4 id="MySQL与Hugepage"><a href="#MySQL与Hugepage" class="headerlink" title="MySQL与Hugepage"></a>MySQL与Hugepage</h4><h5 id="hugepage介绍"><a href="#hugepage介绍" class="headerlink" title="hugepage介绍"></a>hugepage介绍</h5><ul>
<li>大页内存的原理涉及到操作系统的虚拟地址到物理地址的转换过程。操作系统为了能同时运行多个进程，会为每个进程提供一个虚拟进程空间。为了保证进程能在内存中找到虚拟页对应的实际物理块，需要为每个进程维护一个映像表，即页表。页表记录了每一个虚拟页在内存中对应的物理块号。在配置好了页表后，进程执行时，通过查找该表，即可找到每页在内存中的物理块号</li>
<li>由于页表是存放在内存中的，这使CPU在每存取一个数据时，都要两次访问内存。第一次时访问内存中的页表，从中找到指定页的物理块号，再将块号与页内偏移拼接，以形成物理地址。第二次访问内存时，才是从第一次所得地址中获得所需数据。因此，采用这种方式将使计算机的处理速度降低近1/2</li>
<li>为了提高地址变换速度，可在地址变换机构中，增设一个具有并行查找能力的特殊高速缓存，即快表(TLB)，用以存放当前访问的那些页表项。由于成本的关系，快表不可能做得很大，通常只存放16~512个页表项</li>
<li>现代的计算机系统，都支持非常大的虚拟地址空间(2^32~2^64)。在这样的环境下，页表就变得非常庞大。例如，假设页大小为4K，对占用40G内存的程序来说，页表大小为10M，而且还要求空间是连续的。为了解决空间连续问题，可以引入二级或者三级页表。但是这更加影响性能，因为如果快表缺失，访问页表的次数由两次变为三次或者四次。由于程序可以访问的内存空间很大，如果程序的访存局部性不好，则会导致快表一直缺失，从而严重影响性能。此外，由于页表项有10M之多，而快表只能缓存几百页，即使程序的访存性能很好，在大内存的情况下，快表缺失的概率也很大。但是假设我们将页大小变为1G，40G内存的页表项也只有40，快表完全不会缺失！即使缺失，由于表项很少，可以采用一级页表，缺失只会导致两次访存。这就是大页内存可以优化程序性能的根本原因：<strong>提高快表(TLB)的命中率，减少内存访问次数</strong></li>
</ul>
<h5 id="huge-page优势"><a href="#huge-page优势" class="headerlink" title="huge page优势"></a>huge page优势</h5><ul>
<li>提高快表(TLB)的命中率，减少内存访问次数</li>
<li>hugepage是共享内存，它会被一直pin在内存中，避免被交换</li>
</ul>
<h5 id="为MySQL开启hugepage-Linux"><a href="#为MySQL开启hugepage-Linux" class="headerlink" title="为MySQL开启hugepage(Linux)"></a>为MySQL开启hugepage(Linux)</h5><p>InnoDB支持hugepage，可用于buffer pool和additional memory pool。测试环境的MySQL 5.7.25版本中已经没有innodb_additional_mem_pool_size参数，因此这里仅考虑buffer pool</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select version();</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| version()  |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| 5.7.25-log |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">------------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">where</span> variable_name <span class="keyword">in</span> (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'innodb_buffer_pool_size'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; <span class="string">'innodb_additional_mem_pool_size'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-------------------------+-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name           | Value     |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-------------------------+-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| innodb_buffer_pool_size | 536870912 |512MB</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-------------------------+-----------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'large_page%'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-----------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name   | Value |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-----------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">| large_page_size | 0     |</span></pre></td></tr><tr><td class="code"><pre><span class="line">| large_pages     | OFF   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+<span class="comment">-----------------+-------+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span></pre></td></tr></table></figure>
<p>为了开启大页，首先建议关闭透明大页；如果如下两条命令的输出都是never，说明已经关闭transparent hugepage</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@rhel6 ~]# cat /sys/kernel/mm/transparent_hugepage/defrag</span></pre></td></tr><tr><td class="code"><pre><span class="line">always madvise [never]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]# cat /sys/kernel/mm/transparent_hugepage/enabled</span></pre></td></tr><tr><td class="code"><pre><span class="line">always madvise [never]</span></pre></td></tr></table></figure>
<p>如果上述命令输出不是never，则在/etc/rc.local中追加如下内容(如果是Linux 7.x，则为/etc/rc.d/rc.local)，重启后再使用上述命令检查</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if test -f /sys/kernel/mm/transparent_hugepage/enabled; then</span></pre></td></tr><tr><td class="code"><pre><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span></pre></td></tr><tr><td class="code"><pre><span class="line">fi</span></pre></td></tr><tr><td class="code"><pre><span class="line">if test -f /sys/kernel/mm/transparent_hugepage/defrag; then</span></pre></td></tr><tr><td class="code"><pre><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span></pre></td></tr><tr><td class="code"><pre><span class="line">fi</span></pre></td></tr></table></figure>
<p>在/etc/security/limits.conf定义mysql用户的memlock为unlimited</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql soft memlock unlimited</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql hard memlock unlimited</span></pre></td></tr></table></figure>
<p>查看mysql用户的属组信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@rhel6 ~]# id mysql</span></pre></td></tr><tr><td class="code"><pre><span class="line">uid=496(mysql) gid=504(mysql) groups=504(mysql)</span></pre></td></tr></table></figure>
<p>编辑/etc/sysctl.conf，添加如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vm.hugetlb_shm_group=504   # mysql用户的gid</span></pre></td></tr><tr><td class="code"><pre><span class="line">vm.nr_hugepages=512        # 512*2MB=1GB</span></pre></td></tr></table></figure>
<blockquote>
<p>vm.nr_hugepages定义了hugepage的数量，它应当满足如下公式：<br>nr_hugepages * Hugepagesize &gt; innodb_buffer_pool_size + innodb_additional_mem_pool_size</p>
</blockquote>
<p>正确设置kernel.shmmax和kernel.shmall，编辑/etc/sysctl.conf，添加如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kernel.shmmax=1073741824‬    # 1GB</span></pre></td></tr><tr><td class="code"><pre><span class="line">kernel.shmall=2097152       # 2097152*4096=8GB</span></pre></td></tr></table></figure>
<blockquote>
<p>kernel.shmmax：单个共享内存段的最大值(字节)，应当大于要分给mysql使用的hugepage大小<br>kernel.shmall：共享内存总页数，建议为物理内存大小的90%除以PAGE_SIZE(分页大小：getconf PAGE_SIZE)，应当大于：要分给mysql使用的hugepage大小/PAGE_SIZE</p>
</blockquote>
<p>使上述配置生效，并检查大页是否按照预期配置开启。下面的输出表示OS支持并且已经开启大页功能，页面大小为2MB，共512个页，一共1GB大页内存。如果(AnonHugePages不为0，说明没关透明大页)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@rhel6 ~]# sysctl -p</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]# cat /proc/meminfo | grep -i huge</span></pre></td></tr><tr><td class="code"><pre><span class="line">AnonHugePages:         0 kB</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Total:     512</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Free:      512</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Rsvd:        0</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Surp:        0</span></pre></td></tr><tr><td class="code"><pre><span class="line">Hugepagesize:       2048 kB</span></pre></td></tr></table></figure>
<p>在my.cnf中增加如下配置，并重启mysqld(这里innodb_buffer_pool_size设定的是512MB)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">large_pages&#x3D;ON</span></pre></td></tr></table></figure>
<p>查看大页的使用情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#大页已使用512-498=14个，操作系统承诺会分配的大页还有254个，因此预计最大会分配14+254个页，大小为268*2MB=536MB大页内存</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]# cat /proc/meminfo | grep -i huge</span></pre></td></tr><tr><td class="code"><pre><span class="line">AnonHugePages:         0 kB</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Total:     512        ## 总的大页数量</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Free:      498        ## 未分配的大页数量</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Rsvd:      254        ## OS承诺会分配，但暂时还没分配的大页数量</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Surp:        0</span></pre></td></tr><tr><td class="code"><pre><span class="line">Hugepagesize:       2048 kB</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">------------------------------------------------------------------------</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#top输出</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Mem:   1907580k total,  1706188k used,   201392k free,     8724k buffers</span></pre></td></tr><tr><td class="code"><pre><span class="line">Swap:  4095992k total,    27532k used,  4068460k free,   265224k cached</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                                              </span></pre></td></tr><tr><td class="code"><pre><span class="line">66287 mysql     20   0 1628m 184m  11m S  0.0  9.9   0:08.51 mysqld             </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show global variables like <span class="string">'large_page%'</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">+-----------------+---------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name   | Value   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-----------------+---------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">| large_page_size | 2097152 |2MB，等于Hugepagesize</span></pre></td></tr><tr><td class="code"><pre><span class="line">| large_pages     | ON      |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-----------------+---------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">2 rows in set (0.00 sec)</span></pre></td></tr></table></figure>
<p>执行一个大的SQL查询后，再次查看mysqld内存占用和大页使用情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#大页已使用512-445=67个，操作系统承诺会分配的大页还有201个，因此预计最大会分配67+201个页，大小为268*2MB=536MB大页内存</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]# cat /proc/meminfo | grep -i huge</span></pre></td></tr><tr><td class="code"><pre><span class="line">AnonHugePages:         0 kB</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Total:     512</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Free:      445</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Rsvd:      201</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Surp:        0</span></pre></td></tr><tr><td class="code"><pre><span class="line">Hugepagesize:       2048 kB</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">------------------------------------------------------------------------</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#top输出</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Mem:   1907580k total,  1755440k used,   152140k free,      192k buffers</span></pre></td></tr><tr><td class="code"><pre><span class="line">Swap:  4095992k total,    42760k used,  4053232k free,    18308k cached</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                                              </span></pre></td></tr><tr><td class="code"><pre><span class="line">67078 mysql     20   0 1692m 184m 1664 S  0.3  9.9   0:08.69 mysqld</span></pre></td></tr></table></figure>
<h5 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h5><p>测试innodb_buffer_pool_size大于hugepage的情况：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#保持innodb_buffer_pool_size=512M不变，修改/etc/sysctl.cnf中的vm.nr_hugepages=128，使大页总大小为256MB，小于了buffer pool大小</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]# service mysqld stop</span></pre></td></tr><tr><td class="code"><pre><span class="line">Shutting down MySQL....                                    [  OK  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]# sysctl -p</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]# cat /proc/meminfo | grep -i huge</span></pre></td></tr><tr><td class="code"><pre><span class="line">AnonHugePages:         0 kB</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Total:     128</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Free:      128</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Rsvd:        0</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Surp:        0</span></pre></td></tr><tr><td class="code"><pre><span class="line">Hugepagesize:       2048 kB</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动mysqld时，虽然可以成功启动，但是error.log中出现报错信息</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">2019-12-11T09:56:30.182908Z 0 [Note] InnoDB: Initializing buffer pool, total size = 512M, instances = 1, chunk size = 128M</span></pre></td></tr><tr><td class="code"><pre><span class="line">2019-12-11T09:56:30.193825Z 0 [Warning] InnoDB: Failed to allocate 138412032 bytes. errno 12</span></pre></td></tr><tr><td class="code"><pre><span class="line">2019-12-11T09:56:30.193969Z 0 [Warning] InnoDB: Using conventional memory pool</span></pre></td></tr><tr><td class="code"><pre><span class="line">2019-12-11T09:56:30.201059Z 0 [Warning] InnoDB: Failed to allocate 138412032 bytes. errno 12</span></pre></td></tr><tr><td class="code"><pre><span class="line">2019-12-11T09:56:30.201139Z 0 [Warning] InnoDB: Using conventional memory pool</span></pre></td></tr><tr><td class="code"><pre><span class="line">2019-12-11T09:56:30.207174Z 0 [Warning] InnoDB: Failed to allocate 138412032 bytes. errno 12</span></pre></td></tr><tr><td class="code"><pre><span class="line">2019-12-11T09:56:30.207282Z 0 [Warning] InnoDB: Using conventional memory pool</span></pre></td></tr><tr><td class="code"><pre><span class="line">2019-12-11T09:56:30.218470Z 0 [Note] InnoDB: Completed initialization of buffer pool</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]# cat /proc/meminfo | grep -i huge</span></pre></td></tr><tr><td class="code"><pre><span class="line">AnonHugePages:         0 kB</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Total:     128</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Free:      119</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Rsvd:       61</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Surp:        0</span></pre></td></tr><tr><td class="code"><pre><span class="line">Hugepagesize:       2048 kB</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#执行大查询后，大页有被使用的情况，说明即使大页比buffer pool小，也可以使用大页</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@rhel6 ~]# cat /proc/meminfo | grep -i huge</span></pre></td></tr><tr><td class="code"><pre><span class="line">AnonHugePages:         0 kB</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Total:     128</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Free:       67</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Rsvd:        9</span></pre></td></tr><tr><td class="code"><pre><span class="line">HugePages_Surp:        0</span></pre></td></tr><tr><td class="code"><pre><span class="line">Hugepagesize:       2048 kB</span></pre></td></tr></table></figure>
<hr>
<h4 id="reference"><a href="#reference" class="headerlink" title="reference"></a><em>reference</em></h4><p><em><a href="https://dev.mysql.com/doc/refman/5.7/en/optimizing-memory.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/optimizing-memory.html</a></em></p>
<p><em>How to estimate how much memory MySQL uses (文档 ID 1359675.1)</em></p>
<p><em>Why is MySQL Using Less Memory Than Configured? (文档 ID 1483601.1)</em></p>
]]></content>
      <categories>
        <category>MySQL原理</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>内存</tag>
      </tags>
  </entry>
</search>
